{
	"info": {
		"_postman_id": "2f653a6b-8475-4955-b350-b51499ba2ae5",
		"name": "Проверки для 3 части диплома",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32584181"
	},
	"item": [
		{
			"name": "Locations",
			"item": [
				{
					"name": "Создание локации",
					"item": [
						{
							"name": "Создание Локации от Администратора",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 201 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(201);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым lon",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым lat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым radius",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым radius -1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"name\": randomName,\r",
											"    \"radius\": - 1,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с name равным 51 символ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(51);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с Пробелами в поле  name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": \"   \",\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с name равным 2 символа",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(2);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пробелами в description",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": \"                                                      \" \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым description меньше 20 символов",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(18);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Создание локации с пустым description больше 2000 символов Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(2001);\r",
											"\r",
											"let requestBody = {\r",
											"   \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Обновление локации администратора",
					"item": [
						{
							"name": "Обновление локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"    \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.lat.toString()).equal(pm.environment.get(\"updateLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target.lon.toString()).equal(pm.environment.get(\"updateLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target.radius.toString()).equal(pm.environment.get(\"updateRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target.name).equal(pm.environment.get(\"updateName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target.description).equal(pm.environment.get(\"updateDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле name содержит только пробелы",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"    // \"name\": updateName,\r",
											"    \"name\": \"           \",\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле name содержит 2 символа",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(2);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"     \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле name содержит 51 символ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(51);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"    \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле radius содержит -1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": -1,\r",
											"    \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле description содержит только пробелы",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"    \"name\": updateName,\r",
											"    \"description\": \"                        \",\r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле description содержит 19 символа",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(19);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"     \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление локации поле description содержит 2001 символ Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let updateLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let updateLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let updateRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let updateName = generateRandomString(10);\r",
											"let updateDescription = generateRandomString(2001);\r",
											"\r",
											"pm.environment.set(\"updateLon\", updateLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateLat\", updateLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateRadius\", updateRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"updateName\", updateName);\r",
											"pm.environment.set(\"updateDescription\", updateDescription);\r",
											"\r",
											"let updateRequestBody = {\r",
											"    \"lon\": parseFloat(updateLon),\r",
											"    \"lat\": parseFloat(updateLat),\r",
											"    \"radius\": parseFloat(updateRadius),\r",
											"    \"name\": updateName,\r",
											"    \"description\": updateDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"updateBody\", JSON.stringify(updateRequestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});\r",
											"\r",
											"// pm.test(\"Данные в ответе должны соответствовать данным\", function () {\r",
											"//     pm.expect(target.times).to.not.be.null;\r",
											"//     pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"//     pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"//     pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"//     pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"//     pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{updateBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "locationId",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаление локации администратора",
					"item": [
						{
							"name": "Удаление локации администратора",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 204 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление локации администратора Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId + 1);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/locations/::locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										"::locId"
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Получение локаций",
					"item": [
						{
							"name": "Получение  списка локаций",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Список не пустой\", function() {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/?from=0&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										""
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение  списка локаций from=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/?from=-1&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										""
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										},
										{
											"key": "size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение  списка локаций size=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/?from=0&size=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										""
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение  списка локаций size=101",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/?from=0&size=101",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										""
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "101"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Получение локации",
					"item": [
						{
							"name": "Получение локации по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description, events\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id.toString()).equal(pm.collectionVariables.get(\"locId\"));\r",
											"    pm.expect(target.lat.toString()).equal(pm.environment.get(\"generatedLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target.lon.toString()).equal(pm.environment.get(\"generatedLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target.radius.toString()).equal(pm.environment.get(\"generatedRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target.name).equal(pm.environment.get(\"generatedName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target.description).equal(pm.environment.get(\"generatedDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"    pm.expect(target.events).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/::locId?eventStatus=upcoming",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "eventStatus",
											"value": "upcoming"
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение не существующей локации по id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"generatedLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"generatedName\", randomName);\r",
											"pm.environment.set(\"generatedDescription\", randomDescription);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId + 1);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Ответ должен содержать поля: reason, status, message, timestamp, path\", function () {\r",
											"pm.expect(target).to.have.property('reason');\r",
											"pm.expect(target).to.have.property('status');\r",
											"pm.expect(target).to.have.property('message');\r",
											"pm.expect(target).to.have.property('timestamp');\r",
											"pm.expect(target).to.have.property('path');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/::locId?eventStatus=upcoming",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"::locId"
									],
									"query": [
										{
											"key": "eventStatus",
											"value": "upcoming"
										}
									],
									"variable": [
										{
											"key": ":locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Поиск локаций",
					"item": [
						{
							"name": "Поиск локации в заданых координатах с радиусом",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description, events\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('lat');\r",
											"pm.expect(target[0]).to.have.property('lon');\r",
											"pm.expect(target[0]).to.have.property('radius');\r",
											"pm.expect(target[0]).to.have.property('name');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target[0].id.toString()).equal(pm.collectionVariables.get(\"locId\"));\r",
											"    pm.expect(target[0].lat).equal(pm.environment.get(\"testLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target[0].lon).equal(pm.environment.get(\"testLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target[0].radius).equal(pm.environment.get(\"testRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target[0].name).equal(pm.environment.get(\"testName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target[0].description).equal(pm.environment.get(\"testDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"    pm.expect(target[0].events).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"let lon = 55.34;\r",
											"let lat = 39.42;\r",
											"let radius = 10;\r",
											"let name = \"postmanTestname\";\r",
											"let description = \"postmanTestDescription\"\r",
											"\r",
											"pm.environment.set(\"testLon\", lon);\r",
											"pm.environment.set(\"testLat\", lat);\r",
											"pm.environment.set(\"testRadius\", radius);\r",
											"pm.environment.set(\"testName\", name);\r",
											"pm.environment.set(\"testDescription\", description);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(lon),\r",
											"    \"lat\": parseFloat(lat),\r",
											"    \"radius\": parseFloat(radius),\r",
											"    \"name\": name,\r",
											"    \"description\": description \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/search?from=0&size=2&lat=39.40&lon=55.30&radius=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"search"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "lat",
											"value": "39.40"
										},
										{
											"key": "lon",
											"value": "55.30"
										},
										{
											"key": "radius",
											"value": "10"
										},
										{
											"key": "text",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск локации по тексту в названии",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"let lon = 1.32;\r",
											"let lat = 40.89;\r",
											"let radius = 10;\r",
											"let name = \"Парк развлечений\";\r",
											"let description = \"Красивый сквер в самом центре города\"\r",
											"\r",
											"pm.environment.set(\"testLon\", lon);\r",
											"pm.environment.set(\"testLat\", lat);\r",
											"pm.environment.set(\"testRadius\", radius);\r",
											"pm.environment.set(\"testName\", name);\r",
											"pm.environment.set(\"testDescription\", description);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(lon),\r",
											"    \"lat\": parseFloat(lat),\r",
											"    \"radius\": parseFloat(radius),\r",
											"    \"name\": name,\r",
											"    \"description\": description \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description, events\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('lat');\r",
											"pm.expect(target[0]).to.have.property('lon');\r",
											"pm.expect(target[0]).to.have.property('radius');\r",
											"pm.expect(target[0]).to.have.property('name');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target[0].id.toString()).equal(pm.collectionVariables.get(\"locId\"));\r",
											"    pm.expect(target[0].lat).equal(pm.environment.get(\"testLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target[0].lon).equal(pm.environment.get(\"testLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target[0].radius).equal(pm.environment.get(\"testRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target[0].name).equal(pm.environment.get(\"testName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target[0].description).equal(pm.environment.get(\"testDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"    pm.expect(target[0].events).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/search?from=0&size=2&text=Парк",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"search"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "lat",
											"value": "39.40",
											"disabled": true
										},
										{
											"key": "lon",
											"value": "55.30",
											"disabled": true
										},
										{
											"key": "radius",
											"value": "10",
											"disabled": true
										},
										{
											"key": "text",
											"value": "Парк"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск локации по тексту в описании",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"let lon = 1.32;\r",
											"let lat = 40.89;\r",
											"let radius = 10;\r",
											"let name = \"Автодром\";\r",
											"let description = \"Загородный автодром расположенный на территории бывшего аэропорта\"\r",
											"\r",
											"pm.environment.set(\"testLon\", lon);\r",
											"pm.environment.set(\"testLat\", lat);\r",
											"pm.environment.set(\"testRadius\", radius);\r",
											"pm.environment.set(\"testName\", name);\r",
											"pm.environment.set(\"testDescription\", description);\r",
											"\r",
											"let requestBody = {\r",
											"    \"lon\": parseFloat(lon),\r",
											"    \"lat\": parseFloat(lat),\r",
											"    \"radius\": parseFloat(radius),\r",
											"    \"name\": name,\r",
											"    \"description\": description \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestBody\", JSON.stringify(requestBody));\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestBody\")\r",
											"    }\r",
											"}, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locationId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locationId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать статус 200 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(200);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, lat, lon, radius, name, description, events\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('lat');\r",
											"pm.expect(target[0]).to.have.property('lon');\r",
											"pm.expect(target[0]).to.have.property('radius');\r",
											"pm.expect(target[0]).to.have.property('name');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('events');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target[0].id.toString()).equal(pm.collectionVariables.get(\"locId\"));\r",
											"    pm.expect(target[0].lat).equal(pm.environment.get(\"testLat\"), 'Широта локации должна соответствовать широте локации в запросе');\r",
											"    pm.expect(target[0].lon).equal(pm.environment.get(\"testLon\"), 'Долгота локации должна соответствовать долготе локации в запросе');\r",
											"    pm.expect(target[0].radius).equal(pm.environment.get(\"testRadius\"), 'Радиус события должен соответствовать радиусу локации в запросе');\r",
											"    pm.expect(target[0].name).equal(pm.environment.get(\"testName\"), 'Имя локации должно соответствовать имени локации в запросе');\r",
											"    pm.expect(target[0].description).equal(pm.environment.get(\"testDescription\"), 'Описание локации должно соответствовать описанию локации в запросе');\r",
											"    pm.expect(target[0].events).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/search?from=0&size=2&text=аэроп",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"search"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "2"
										},
										{
											"key": "lat",
											"value": "39.40",
											"disabled": true
										},
										{
											"key": "lon",
											"value": "55.30",
											"disabled": true
										},
										{
											"key": "radius",
											"value": "10",
											"disabled": true
										},
										{
											"key": "text",
											"value": "аэроп"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Создание локации",
					"item": [
						{
							"name": "Создание события с локацией администратора",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    while (result.length < length) {\r",
											"        result += Math.random().toString(36).substring(2);\r",
											"    }\r",
											"    return result.substring(0, length);\r",
											"}\r",
											"\r",
											"function getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
											"    let moment = require('moment');\r",
											"\r",
											"    let m = moment();\r",
											"    m.add(hourShift, 'hour');\r",
											"    m.add(minuteShift, 'minute');\r",
											"    m.add(yearShift, 'year');\r",
											"\r",
											"    return m.format('YYYY-MM-DD HH:mm:ss');\r",
											"}\r",
											"\r",
											"function sendRequestWithDelay(request, delay, callback) {\r",
											"    setTimeout(() => {\r",
											"        pm.sendRequest(request, callback);\r",
											"    }, delay);\r",
											"}\r",
											"\r",
											"let randomUserName = generateRandomString(7);\r",
											"let randomUserEmail = generateRandomString(5) + '@test.com';\r",
											"\r",
											"pm.environment.set('userName', randomUserName);\r",
											"pm.environment.set('userEmail', randomUserEmail);\r",
											"\r",
											"let requestUser = {\r",
											"    \"name\": randomUserName,\r",
											"    \"email\": randomUserEmail\r",
											"}\r",
											"\r",
											"pm.environment.set(\"requestUser\", JSON.stringify(requestUser));\r",
											"\r",
											"sendRequestWithDelay({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/users'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestUser\")\r",
											"    }\r",
											"}, 1, function (err, response) { // Задержка 2 секунды\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        if (response && response.code === 201) {\r",
											"            console.log('Пользователь успешно создан:', response.json());\r",
											"            let userId = response.json().id;\r",
											"            pm.collectionVariables.set(\"userId\", userId);\r",
											"        } else {\r",
											"            console.error('Ошибка при создании пользователя: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let randomCategoryName = generateRandomString(10);\r",
											"\r",
											"pm.environment.set(\"categoryName\", randomCategoryName);\r",
											"\r",
											"let requestCategory = {\r",
											"    \"name\": randomCategoryName\r",
											"}\r",
											"\r",
											"pm.environment.set(\"requestCategory\", JSON.stringify(requestCategory));\r",
											"\r",
											"sendRequestWithDelay({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/categories'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestCategory\")\r",
											"    }\r",
											"}, 1000, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Категория успешно создана:', response.json());\r",
											"            let catId = response.json().id;\r",
											"            pm.collectionVariables.set(\"catId\", catId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании категории: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let randomLon = (Math.random() * 180 - 90).toFixed(3); // Долгота от -90 до 90\r",
											"let randomLat = (Math.random() * 360 - 180).toFixed(3); // Широта от -180 до 180\r",
											"let randomRadius = (Math.random() * 50).toFixed(3); // Радиус до 50\r",
											"let randomName = generateRandomString(10);\r",
											"let randomDescription = generateRandomString(21);\r",
											"\r",
											"pm.environment.set(\"locationLon\", randomLon.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"locationLat\", randomLat.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"locationRadius\", randomRadius.replace(/\\.?0+$/, ''));\r",
											"pm.environment.set(\"locationName\", randomName);\r",
											"pm.environment.set(\"locationDescription\", randomDescription);\r",
											"\r",
											"let requestLocation = {\r",
											"    \"lon\": parseFloat(randomLon),\r",
											"    \"lat\": parseFloat(randomLat),\r",
											"    \"radius\": parseFloat(randomRadius),\r",
											"    \"name\": randomName,\r",
											"    \"description\": randomDescription \r",
											"};\r",
											"\r",
											"pm.environment.set(\"requestLocation\", JSON.stringify(requestLocation));\r",
											"\r",
											"sendRequestWithDelay({\r",
											"    url: pm.variables.replaceIn('{{baseUrl}}/admin/locations'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.environment.get(\"requestLocation\")\r",
											"    }\r",
											"}, 2000, function (err, response) {\r",
											"\r",
											"    if (err) {\r",
											"        console.error('Ошибка при отправке запроса:', err);\r",
											"    } else {\r",
											"        \r",
											"    if (response && response.code === 201) {\r",
											"            console.log('Локация успешно создана:', response.json());\r",
											"            let locId = response.json().id;\r",
											"            pm.collectionVariables.set(\"locId\", locId);\r",
											"    } else {\r",
											"            console.error('Ошибка при создании локации: HTTP статус', response ? response.code : 'неизвестен');\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"let randomAnnotation = generateRandomString(21);\r",
											"let randomEventDescription = generateRandomString(28);\r",
											"let randomEventDate = getFutureDateTime();\r",
											"let randomTitle = generateRandomString(15);\r",
											"\r",
											"pm.environment.set(\"eventAnnotation\", randomAnnotation);\r",
											"pm.environment.set(\"eventDescription\", randomEventDescription);\r",
											"pm.environment.set(\"eventEventDate\", randomEventDate);\r",
											"pm.environment.set(\"eventTitle\", randomTitle);\r",
											"\r",
											"setTimeout(() => {\r",
											"    let requestEvent = {\r",
											"      \"annotation\": pm.environment.get(\"eventAnnotation\"),\r",
											"      \"category\":  pm.collectionVariables.get(\"catId\"),\r",
											"      \"description\": pm.environment.get(\"eventDescription\"),\r",
											"      \"eventDate\": pm.environment.get(\"eventEventDate\"),\r",
											"      \"location\": {\r",
											"        \"id\": pm.collectionVariables.get(\"locId\")\r",
											"      },\r",
											"      \"paid\": true,\r",
											"      \"participantLimit\": 10,\r",
											"      \"requestModeration\": false,\r",
											"      \"title\": pm.environment.get(\"eventTitle\")\r",
											"    };\r",
											"\r",
											"    pm.environment.set(\"requestEvent\", JSON.stringify(requestEvent));\r",
											"}, 3000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Ответ должен содержать статус 201 и совпадающие данные\",function() {\r",
											"pm.response.to.have.status(201);\r",
											"pm.response.to.be.withBody;\r",
											"pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: annotation, category, confirmedRequests, eventDate, id, description, initiator, paid, title, views, createdOn,location, participantLimit,publishedOn, requestModeration,state \", function () {\r",
											"pm.expect(target).to.have.property('annotation');\r",
											"pm.expect(target).to.have.property('category');\r",
											"pm.expect(target).to.have.property('confirmedRequests');\r",
											"pm.expect(target).to.have.property('eventDate');\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('initiator');\r",
											"pm.expect(target).to.have.property('paid');\r",
											"pm.expect(target).to.have.property('title');\r",
											"pm.expect(target).to.have.property('views');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('location');\r",
											"pm.expect(target).to.have.property('participantLimit');\r",
											"pm.expect(target).to.have.property('publishedOn');\r",
											"pm.expect(target).to.have.property('requestModeration');\r",
											"pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.annotation.toString()).equal(pm.environment.get(\"eventAnnotation\"), 'Краткое описание должно соответствовать краткому описанию в запросе');\r",
											"    pm.expect(target.category.id.toString()).equal(pm.collectionVariables.get(\"catId\"), 'Идентификационный номер категории должен соответствовать идентификационному номеру категории в запросе');\r",
											"    pm.expect(target.category.name.toString()).equal(pm.environment.get(\"categoryName\"), 'Название категории должно соответствовать названию категории в запросе');\r",
											"    pm.expect(target.confirmedRequests).to.eql(0), 'Должно быть равно 0';\r",
											"    pm.expect(target.eventDate).equal(pm.environment.get(\"eventEventDate\"));\r",
											"    pm.expect(target.initiator.id.toString()).equal(pm.collectionVariables.get(\"userId\"));\r",
											"    pm.expect(target.initiator.name).equal(pm.environment.get(\"userName\"));\r",
											"    pm.expect(target.paid).equal(true);\r",
											"    pm.expect(target.title).equal(pm.environment.get(\"eventTitle\"));\r",
											"    pm.expect(target.views).equal(0);\r",
											"    pm.expect(target.createdOn).to.not.be.null;\r",
											"    pm.expect(target.description).equal(pm.environment.get(\"eventDescription\"));\r",
											"    pm.expect(target.location.lat.toString()).equal(pm.environment.get(\"locationLat\"));\r",
											"    pm.expect(target.location.lon.toString()).equal(pm.environment.get(\"locationLon\"));\r",
											"    pm.expect(target.location.name).equal(pm.environment.get(\"locationName\"));\r",
											"    pm.expect(target.location.description).equal(pm.environment.get(\"locationDescription\"));\r",
											"    pm.expect(target.location.radius.toString()).equal(pm.environment.get(\"locationRadius\"));\r",
											"    pm.expect(target.participantLimit).equal(10);\r",
											"    pm.expect(target.publishedOn).to.be.null;\r",
											"    pm.expect(target.requestModeration).equal(false);\r",
											"    pm.expect(target.state).equal(\"PENDING\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{requestEvent}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/::userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"::userId",
										"events"
									],
									"variable": [
										{
											"key": ":userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function generateRandomString(length) {\r",
					"    let result = '';\r",
					"    while (result.length < length) {\r",
					"        result += Math.random().toString(36).substring(2);\r",
					"    }\r",
					"    return result.substring(0, length);\r",
					"}\r",
					"\r",
					"const variablesToReset = ['locId', 'userId', 'catId'];\r",
					"\r",
					"variablesToReset.forEach((variableName) => {\r",
					"    pm.collectionVariables.set(variableName, null);\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "locId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		}
	]
}